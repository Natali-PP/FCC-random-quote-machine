{"version":3,"sources":["images/twitter-black-shape.svg","images/right-quote-sign.svg","components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QuoteBox","useState","content","setContent","autor","setAutor","getQuote","fetch","then","blob","json","data","author","useEffect","className","id","src","rightQuote","alt","href","twitterIcon","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,8C,sMCoD5BC,MA/Cf,WAAoB,IAAD,EACeC,mBAAS,IADxB,mBACRC,EADQ,KACCC,EADD,OAEWF,mBAAS,IAFpB,mBAERG,EAFQ,KAEDC,EAFC,KAKf,SAASC,IAELC,MAAM,kCACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAM,SAAAG,GAAUN,EAASM,EAAKC,QAC3BT,EAAWQ,EAAKT,YAgB5B,OAXAW,qBAAU,WACNP,MACD,IAUC,yBAAKQ,UAAU,aACX,uBAAGC,GAAG,OAAOD,UAAU,mBAAmBZ,GAC1C,yBAAKY,UAAU,qBACX,uBAAGC,GAAG,UAAN,KAAmBX,GAEnB,yBAAKU,UAAU,wBAAwBE,IAAKC,IAAYC,IAAI,sBAGhE,yBAAKJ,UAAU,sBACX,uBAAGC,GAAG,cAAcI,KAAK,mCAAkC,yBAAKH,IAAKI,IAAaF,IAAI,eAAeJ,UAAU,4BAE/G,4BAAQC,GAAG,YAAYD,UAAU,uBAAsBO,QAASf,GAAhE,gBChCDgB,MARf,WACE,OACE,yBAAMP,GAAG,aACR,kBAAC,EAAD,QCMeQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.16e62458.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter-black-shape.87fdbe47.svg\";","module.exports = __webpack_public_path__ + \"static/media/right-quote-sign.4fac983a.svg\";","import React, {useCallback, useEffect, useState} from 'react'\nimport twitterIcon from '../images/twitter-black-shape.svg'\nimport rightQuote from '../images/right-quote-sign.svg'\nimport '../styles/QuoteBox.scss'\n\nfunction QuoteBox(){\n    const [content, setContent] = useState('')\n    const [autor, setAutor] = useState('')\n    //const [quote, setQuote] = useState()\n\n    function getQuote(){\n        let dataQuote\n        fetch('https://api.quotable.io/random')\n            .then(blob => blob.json())\n            .then( data => { setAutor(data.author)\n                setContent(data.content)\n            })\n        //return {quote, dataQuote}\n    } ;\n\n    useEffect(() => {\n        getQuote()\n    }, []);\n\n    \n\n    const onButtonClick = (event => {\n        getQuote();\n    });\n\n    //const {quote, dataQuote} = getQuote()\n    return (\n        <div className=\"quote-box\">\n            <p id=\"text\" className=\"quote-box__text\">{content}</p>\n            <div className=\"quote-box__author\">\n                <p id=\"author\" >- {autor}</p>\n                \n                <img className=\"quote-box__quote-sign\" src={rightQuote} alt=\"right-quote-sign\"/>\n            </div>\n\n            <div className=\"quote-box--twitter\">\n                <a id=\"tweet-quote\" href=\"http://twitter.com/intent/tweet\"><img src={twitterIcon} alt=\"twitter-icon\" className=\"quote-box__tweet-quote\"/></a>\n                \n                <button id=\"new-quote\" className=\"quote-box__new-quote\"onClick={getQuote}>New Quote</button>\n                \n                \n            </div >\n            \n\n        </div>\n    )\n}\nexport default QuoteBox","import React from 'react';\n\nimport QuoteBox from './components/QuoteBox' \nfunction App() {\n  return (\n    <div  id=\"quote-box\" >\n     <QuoteBox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}